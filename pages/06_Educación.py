# app.py
import streamlit as st
import pandas as pd
from src.utils.constants import DATA_OUT_PATH, PATHS,diccionario_aglomerados
from src.functions_streamlit.educacion import  procesar_niveles_educativos, crear_grafico_barras, INTERVALOS,obtener_nivel_mas_comun_ordinal,graficar_nivel_mas_comun_ordinal,ranking_aglomerado_EJ4
from src.utils.loader import cargar_parcial_csv, cargar_json,verificar_fechas_cargadas_en_session

# Configuraci칩n inicial
st.set_page_config(layout="wide")
st.title("游늵 Nivel Educativo de la Poblaci칩n Argentina (EPH)")

#  Cargar datos
# Acceder a los DataFrames
df_ind = cargar_parcial_csv(PATHS["individual"]["csv"], ['PONDERA','ANO4','NIVEL_ED','CH06','CODUSU','TRIMESTRE','AGLOMERADO','CH09']) # DataFrame individuos
df_hog = cargar_parcial_csv(PATHS["hogar"]["csv"],['PONDERA','ANO4','CODUSU','TRIMESTRE','AGLOMERADO'])#DataFrame hogares
fechas_ind = cargar_json(PATHS["individual"]["json"]) # Json individuos
fechas_hog = cargar_json(PATHS["hogar"]["json"]) # Json hogares
verificar_fechas_cargadas_en_session()
fechas_comunes=st.session_state.fechas_correspondencia


# -------------------- 1.6.1 --------------------
#  Sidebar con filtros
with st.sidebar:
    st.header("Filtros")
    
    # Cargamos los a침os disponibles
    a침os_disponibles = sorted(list({a침o for a침o, trim in fechas_comunes}), reverse=True)
    
    if not a침os_disponibles:
        st.warning("No se pudieron cargar los periodos disponibles")
    else:
        # Selector de a침o
        a침o_seleccionado = st.selectbox(
            "Seleccione el a침o",
            options=a침os_disponibles,
            index=0  # Selecciona el a침o m치s reciente por defecto
        )

#  Procesamiento de datos
conteo_educativo = procesar_niveles_educativos(df_ind, a침o_seleccionado)

#  Visualizaci칩n
st.subheader("Distribuci칩n Educativa Detallada")
# Crear el gr치fico
fig = crear_grafico_barras(conteo_educativo, a침o_seleccionado)

# Mostrar en Streamlit
st.pyplot(fig)

# -------------------- 1.6.2 --------------------


st.title("游닄 Nivel Educativo M치s Com칰n por Grupo Etario")

st.subheader("Seleccion치 los intervalos etarios")

# Selector
intervalos_seleccionados = st.multiselect(
    "Seleccion치 intervalos etarios:",
    options=list(INTERVALOS.keys()),
    default=list(INTERVALOS.keys())
)

# Validaci칩n
if intervalos_seleccionados:
    df_resultado = obtener_nivel_mas_comun_ordinal(df_ind, intervalos_seleccionados)
    fig = graficar_nivel_mas_comun_ordinal(df_resultado)
    st.pyplot(fig)
else:
    st.info("Por favor seleccion치 al menos un intervalo para mostrar.")
    
# -------------------- 1.6.3 --------------------    
anio,trimestre = max(fechas_comunes)

ranking = ranking_aglomerado_EJ4(df_ind, df_hog, diccionario_aglomerados, anio, trimestre)
df_ranking = pd.DataFrame(ranking, columns=["Aglomerado", "Porcentaje"])

st.subheader("游늵 Top 5 aglomerados con mayor proporci칩n de hogares con 2 o m치s universitarios")
st.dataframe(df_ranking)

csv = df_ranking.to_csv(index=False).encode("utf-8")
st.download_button("游닌 Descargar CSV", data=csv, file_name="ranking_aglomerado.csv", mime="text/csv")