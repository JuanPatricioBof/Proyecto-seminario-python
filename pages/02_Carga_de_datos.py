import streamlit as st
import sys
sys.path.append("..") # Acceso a src

# Importar la funci√≥n y las constantes
from src.dataset.generar_dataset import join_data
from src.functions_streamlit.carga import obtener_periodos, verificar_correspondencia
from src.utils.constants import DATA_OUT_PATH, DATA_PATH, PATHS
from src.dataset.agregar_columnas import generar_columnas_csv_individual,generar_columnas_csv_hogar
from src.utils.loader import cargar_fechas_correspondencia_en_session

st.title("üìÅ Carga de datos")  # T√≠tulo principal de la p√°gina

## ----------------------------
## SECCI√ìN 1: VERIFICACI√ìN INICIAL DE ARCHIVOS
## ----------------------------

# Comprobar si los archivos JSON base existen
if not PATHS["hogar"]["json"].exists() or not PATHS["individual"]["json"].exists():
    st.markdown("Los EPH no est√°n procesados, por favor presione este bot√≥n")
    
    # Bot√≥n para iniciar el procesamiento
    if st.button("Procesar los EPH"):
        with st.spinner("Procesando datasets..."):
            # Procesamiento inicial de datos
            join_data()  # Funci√≥n principal de uni√≥n de datos
            
            # Generar archivos CSV si no existen
            if not PATHS["hogar"]["csv"].exists():
                generar_columnas_csv_hogar()
            if not PATHS["individual"]["csv"].exists():
                generar_columnas_csv_individual()
            
            st.success("‚úÖ Datasets procesados correctamente.")
            st.rerun()  # Recargar la p√°gina para reflejar cambios
    
    st.stop()  # Detener ejecuci√≥n si no hay archivos base

## ----------------------------
## SECCI√ìN 2: CARGA DE PERIODOS DISPONIBLES
## ----------------------------

# Carga inicial de periodos disponibles (con spinner visual)
with st.spinner("Cargando periodos disponibles..."):
    cargar_fechas_correspondencia_en_session()  # Carga en session_state

## ----------------------------
## SECCI√ìN 3: VERIFICACI√ìN DE CORRESPONDENCIA
## ----------------------------

# Comprobar consistencia entre archivos de hogares e individuos
lista_tupla_tipo_archivos_faltantes = verificar_correspondencia(
    PATHS["hogar"]["json"], 
    PATHS["individual"]["json"]
)

if lista_tupla_tipo_archivos_faltantes:
    # Mostrar errores si hay inconsistencias
    st.error("Archivos faltantes:")
    for a√±o, trimestre, tipo in lista_tupla_tipo_archivos_faltantes:
        st.markdown(f"‚Ä¢ Falta en {tipo}: A√±o {a√±o}, Trimestre {trimestre}")
else:
    # Mensaje de √©xito si todo est√° completo
    st.success("‚úì Chequeo de correspondencia exitoso")
    st.write("No se encontraron inconsistencias entre los archivos")

## ----------------------------
## SECCI√ìN 4: INFORMACI√ìN DE PERIODOS
## ----------------------------

# Obtener y mostrar el rango temporal disponible
resultado = obtener_periodos()
if resultado:
    primero, ultimo = resultado
    st.markdown(
        f"**Rango temporal disponible:**\n\n"
        f"‚Ä¢ **Primer periodo:** 0{primero[1]}/{primero[0]}\n"
        f"‚Ä¢ **√öltimo periodo:** 0{ultimo[1]}/{ultimo[0]}"
    )
else:
    st.warning("‚ö†Ô∏è No se encontraron archivos en la carpeta `data_eph`.")

## ----------------------------
## SECCI√ìN 5: ACTUALIZACI√ìN MANUAL
## ----------------------------

# Bot√≥n para forzar actualizaci√≥n completa
if st.button("üîÑ Forzar actualizaci√≥n del dataset"):
    with st.spinner("Actualizando datasets..."):
        # Reprocesar todos los datos
        join_data()
        
        # Limpiar cach√© de fechas si existe
        if 'fechas_correspondencia' in st.session_state:
            del st.session_state.fechas_correspondencia
        cargar_fechas_correspondencia_en_session(forzar_actualizacion=True)
        st.success("‚úÖ Dataset actualizado correctamente.")


